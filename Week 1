#week 1 work
def fizzbuzz(arr):
    for x in arr:
        if x%3==0 and x%5==0:
            print("fizzbuzz")
        elif x%3==0:
            print("fizz")
        elif x%5==0:
            print("buzz")

        else:
            print(x)
def fibonacci(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    a=0
    b=1
    for i in range(n-1):
        a,b=b,a+b
    return b
# week 2 work
def twosum(arr,val):
    for x in arr:
        for y in arr:
            if x+y==val:
                return [x,y]
    return None
#print(twosum([3, 2, 6, 9, 5],9))
def twosum_beta(arr,x):
    if not arr or len(arr)<2: #covers the edge cases where the a non array or array of length of 1/0 is passed
        return None
    s=set() #set is created
    s.add(arr[0]) #first value of the array is added to the set
    for i in range(1,len(arr)): # x=1 y=3 x+y=4 x=4-y is being used to make the solution more efficient
        if x-arr[i] in s: #
            return (x-arr[i],arr[i]) # returns the first pair of numbers that sum up to x
        s.add(arr[i]) #
    return None
# week 3 --- will come back to
# week 4
# get length of a linked list
#iterate through the list until null is reached
def length(self,head):
    count=0
    while head is not None:
        count+=1
        head=head.next
    return count
#time complexity: o(n) space complexity:
# given a linked list determine if it is a palindrome
#plan: add the data into an array and invert it using [::-1] time complexity:O(n) space complexity:O(n) cuz dealing with n number of elenents.
#space complexity can be optimized to be o(1)
def palindrome(self,head):
    arr=[]
    while head:
        arr.append(head.val)
        heahd=head.next
    xda=[]
    xda=arr[::-1]
    if arr==xda:
        return True
    return False
